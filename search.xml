<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript高级</title>
      <link href="/2022/10/23/JavaScript%E9%AB%98%E7%BA%A7%20(1)/"/>
      <url>/2022/10/23/JavaScript%E9%AB%98%E7%BA%A7%20(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="一、类和对象"><a href="#一、类和对象" class="headerlink" title="一、类和对象"></a>一、类和对象</h2><h3 id="1、ES6中的类和对象"><a href="#1、ES6中的类和对象" class="headerlink" title="1、ES6中的类和对象"></a>1、ES6中的类和对象</h3><h4 id="（1）、对象"><a href="#（1）、对象" class="headerlink" title="（1）、对象"></a>（1）、对象</h4><p>在js中，对象是一组无序的相关属性和方法的集合，所有事物都是对象。</p><ul><li>对象由<code>属性</code>和<code>方法</code>组成；</li><li>属性是对象的<code>特征</code>，方法是对象的<code>行为</code>。</li></ul><h4 id="（2）、类"><a href="#（2）、类" class="headerlink" title="（2）、类"></a>（2）、类</h4><p>在ES6中新增加了类的概念，可以使用<code>class</code>关键字声明一个类，之后以这个类来实例化对象</p><ul><li>类抽象了对象的公共部分，泛指某一大类；</li><li>对象特指某一个，通过类实例化一个具体的对象 。</li></ul><p>面向对象的思维特点<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32424723/1660200049026-6138ba2f-882e-4687-b2e5-226f8d4a7b32.jpeg#clientId=uc84d099f-98d7-4&crop=0&crop=0&crop=1&crop=1&from=ui&height=343&id=ufc0e9a90&margin=%5Bobject%20Object%5D&name=yuque_diagram.jpg&originHeight=458&originWidth=507&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30664&status=done&style=none&taskId=u7ea000f1-eea7-4e07-9627-1046e8f8d94&title=&width=380" alt="yuque_diagram.jpg"></p><h4 id="（3）、创建类"><a href="#（3）、创建类" class="headerlink" title="（3）、创建类"></a>（3）、创建类</h4><ul><li>语法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">name</span> &#123;</span><br><span class="line">  <span class="comment">// class body</span></span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure><ul><li>创建实例</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xx = <span class="keyword">new</span> <span class="title function_">name</span>();     </span><br></pre></td></tr></table></figure><pre><code>   类必须使用 new 实例化对象</code></pre><h4 id="（4）、类-constructor-构造函数"><a href="#（4）、类-constructor-构造函数" class="headerlink" title="（4）、类 constructor 构造函数"></a>（4）、类 constructor 构造函数</h4><p>constructor() 方法是类的构造函数(默认方法)，用于<code>传递参数</code>,返回<code>实例对象</code>，通过<code>new</code>命令生成对象实例时，自动调用该方法。如果没有显示定义, 类内部会自动给我们创建一个constructor() 。</p><ul><li>语法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name,age</span>) &#123;   <span class="comment">// constructor 构造方法或者构造函数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure><ul><li>创建实例</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newPerson = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">18</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newPerson.<span class="property">name</span>)    </span><br></pre></td></tr></table></figure><p><code>类似于ES6前的构造函数（function()&#123;&#125;），设置属性，但在方法等的语法有所区别，需要注意</code>。</p><h4 id="（5）、类添加方法"><a href="#（5）、类添加方法" class="headerlink" title="（5）、类添加方法"></a>（5）、类添加方法</h4><ul><li>语法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name,age</span>) &#123;   <span class="comment">// constructor 构造器或者构造函数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;           </span><br></pre></td></tr></table></figure><ul><li>创建实例</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newPerson = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="number">18</span>); </span><br><span class="line">newPerson.<span class="title function_">say</span>()   </span><br></pre></td></tr></table></figure><p>方法之间不能加逗号分隔，同时方法不需要添加 function 关键字。</p><h3 id="2、类的继承"><a href="#2、类的继承" class="headerlink" title="2、类的继承"></a>2、类的继承</h3><p>子类可以继承父类的一些属性和方法。</p><h4 id="（1）、继承"><a href="#（1）、继承" class="headerlink" title="（1）、继承"></a>（1）、继承</h4><ul><li>语法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;   <span class="comment">// 父类</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;  <span class="comment">// 子类继承父类</span></span><br><span class="line">&#125;       </span><br></pre></td></tr></table></figure><ul><li>调用父类属性和方法</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">uname</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">uname</span>=uname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你的名字是&#x27;</span>+<span class="variable language_">this</span>.<span class="property">uname</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span>&#123;  <span class="comment">//子类继承父类的属性和方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newPerson = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newPerson.<span class="property">uname</span>);</span><br><span class="line">newPerson.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure><h4 id="（2）、super关键字"><a href="#（2）、super关键字" class="headerlink" title="（2）、super关键字"></a>（2）、super关键字</h4><ul><li>调用父类函数</li></ul><p><code>super</code>关键字用于访问和调用对象父类上的函数。可以调用父类的构造函数，也可以调用父类的普通函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;这是父类&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">       <span class="variable language_">super</span>(x, y);<span class="comment">//相当于调用了父类中的constructor函数</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">super</span>.<span class="title function_">say</span>() + <span class="string">&quot;的子类&quot;</span>);<span class="comment">//这里super.say()，调用了父类中的say（）方法</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">   son.<span class="title function_">sum</span>();</span><br><span class="line">   son.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure><ul><li>继承父类同时扩展自己</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(x, y);<span class="comment">//super必须在子类this前</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">subtract</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    son.<span class="title function_">subtract</span>();</span><br><span class="line">    son.<span class="title function_">sum</span>();</span><br></pre></td></tr></table></figure><p>在ES6中类没有变量提升，所以必须先定义类，才能通过类实例化对象;<br>类里面的共有属性和方法一定要加this使用;<br>constructor 里面的this指向实例对象, 方法里面的this 指向这个方法的调用者。</p><h2 id="二、构造函数与原型"><a href="#二、构造函数与原型" class="headerlink" title="二、构造函数与原型"></a>二、构造函数与原型</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>在 ES6之前，对象不是基于类创建的，而是用一种称为<code>构造函数</code>的特殊函数来定义对象和它们的特征。</p><ul><li>创建对象的三种方法<ol><li>对象字面量</li></ol></li></ul><p><code>var obj1=&#123;&#125;;</code></p><ol start="2"><li>new Object()</li></ol><p><code>var obj2 = new Object();</code></p><ol start="3"><li>自定义构造函数</li></ol><p><code>function Star() &#123;&#125;</code><br><code>new Star();</code></p><h3 id="2、构造函数和原型"><a href="#2、构造函数和原型" class="headerlink" title="2、构造函数和原型"></a>2、构造函数和原型</h3><h4 id="（1）、构造函数"><a href="#（1）、构造函数" class="headerlink" title="（1）、构造函数"></a>（1）、构造函数</h4><p>构造函数是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与<code>new</code>一起使用。我们可以把对象中一些公共的属性和方法抽取出来，然后封装到这个函数里面。</p><ul><li>new在执行时会做四件事情<ol><li>在内存中创建一个新的空对象</li><li>让this指向这个新的对象</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法</li><li>返回这个新对象（所以构造函数里面不需要return)</li></ol></li><li>静态成员和实例成员<ol><li>静态成员：在构造函数<code>本身上添加的成员</code>称为静态成员，只能由构造函数本身来访问</li><li>实例成员：在构造函数<code>内部创建的对象成员</code>称为实例成员，只能有实例化的对象来访问</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;song&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//实例成员只能通过实例化的对象来访问</span></span><br><span class="line">   <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">uname</span>);</span><br><span class="line">   <span class="comment">//静态成员只能通过构造函数来访问</span></span><br><span class="line">   <span class="title class_">Star</span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property">sex</span>);</span><br></pre></td></tr></table></figure><p>还有一种情况：向实例对象中追加属性，<code>ldh.score=100;</code>  这种情况下并不是通过构造函数来访问，还是通过实例对象。</p><ul><li>构造函数中的问题</li></ul><p>创建实例对象时，属性为简单数据类型可以直接进行赋值，而方法里的function()函数是复杂数据类型，所以我们需要开辟一个空间来进行存储。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/32424723/1660219091992-839b4669-9a41-4b2c-a93a-bbd5037284fc.png#clientId=uf6c2fa55-eb93-4&crop=0&crop=0&crop=1&crop=1&from=ui&height=258&id=u7eba1142&margin=%5Bobject%20Object%5D&name=%E5%9B%BE%E7%89%872.png&originHeight=344&originWidth=861&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14551&status=done&style=none&taskId=ub54bb8f1-bf77-4876-8e62-ddac4b936fe&title=&width=646" alt="图片2.png"><br>当创建多个实例对象时，也就要开辟多个空间来存储函数，这些空间的地址不同但函数相同，会造成浪费内存的问题。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;song&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sing</span>===zxy.<span class="property">sing</span>);</span><br></pre></td></tr></table></figure><p><code>结果返回：false</code><br>因此，想让所有的实例对象都使用同一个地址中的函数，这就引出了下面的<code>原型对象</code>属性。</p><h4 id="（2）、原型"><a href="#（2）、原型" class="headerlink" title="（2）、原型"></a>（2）、原型</h4><ul><li>原型对象prototype</li></ul><p>JavaScript 规定，每一个构造函数都有一个<code>prototype 属性</code>，指向另一个对象。注意这个 prototype 就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。<br>我们可以把那些<code>不变的方法</code>，直接定义在 prototype 对象上，这样所有对象的实例就可以<code>共享</code>这些方法。<br>方法里的this 指向的是这个方法的<code>调用者</code>, 也就是这个<code>实例对象</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;song&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">   <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>);</span><br><span class="line">   ldh.<span class="title function_">sing</span>();</span><br><span class="line">   zxy.<span class="title function_">sing</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property"><span class="keyword">prototype</span></span> === zxy.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure><p><code>结果返回：true</code><br>通俗来说，之前在创建实例对象时，每创建一次就要为方法中的函数“盖一座房子”，而现在有了原型对象之后，在创建完实例对象后，只要去原型对象那里就能找到储存方法的“房子”。<br>但同时，又抛出一个问题：sing（）（方法）是存放在Star.prototype（构造函数的原型对象）上的，为什么实例对象可以访问？</p><ul><li>对象原型__proto__</li></ul><p>对象都会有一个属性<code>__proto__</code>（谷歌中写为[[Prototype]]）指向构造函数的<code>prototype</code> 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 <strong>proto</strong> 原型的存在。</p><ol><li>__proto__对象原型和原型对象 prototype 是<code>等价</code>的</li><li>l__proto__对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 prototype</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32424723/1660220744892-da2d7827-6bbf-4b36-9897-a65a56a0e1e5.jpeg#clientId=uf6c2fa55-eb93-4&crop=0&crop=0&crop=1&crop=1&from=ui&height=276&id=ub80c2c07&margin=%5Bobject%20Object%5D&name=yuque_diagram1.jpg&originHeight=368&originWidth=826&originalType=binary&ratio=1&rotation=0&showTitle=false&size=41945&status=done&style=none&taskId=u85308811-9674-4377-9dd3-d7377852599&title=&width=620" alt="yuque_diagram1.jpg"></p><h4 id="（3）、constructor构造函数"><a href="#（3）、constructor构造函数" class="headerlink" title="（3）、constructor构造函数"></a>（3）、constructor构造函数</h4><p>对象原型（ __proto__）和构造函数（prototype）原型对象里面都有一个属性 constructor属性 ，constructor 我们称为构造函数，因为它<code>指回构造函数本身</code>。<br>constructor 主要用于记录该对象引用于哪个构造函数，它可以让原型对象<code>重新指向原来的构造函数</code>。</p><ul><li>如果有多个对象的方法，我们可以给原型对象采取对象形式赋值</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;song&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">movie</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">     <span class="attr">constructor</span>: <span class="title class_">Star</span>,<span class="comment">//重新指向Star构造函数</span></span><br><span class="line">     <span class="attr">sing</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;song&#x27;</span>);</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">movie</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>以对象形式赋值就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 constructor  就不再指向当前构造函数了。此时，我们可以在修改后的原型对象中，添加一个 constructor 指向原来的构造函数。</p><ul><li>构造函数、实例、原型对象三者之间的关系</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32424723/1660302928499-1657723d-22a5-4643-aa32-452dee98f024.jpeg#clientId=ubf319281-f591-4&crop=0&crop=0&crop=1&crop=1&from=ui&height=463&id=u580e8437&margin=%5Bobject%20Object%5D&name=yuque_diagram3.jpg&originHeight=617&originWidth=969&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63413&status=done&style=none&taskId=u8f48c76d-d626-4226-b942-12f43438f8f&title=&width=727" alt="yuque_diagram3.jpg"></p><h4 id="（4）、原型链"><a href="#（4）、原型链" class="headerlink" title="（4）、原型链"></a>（4）、原型链</h4><p>由上可知，原型对象（prototype）本质上也是一个对象，而对象都有对象原型（__prototype__）属性指向它的原型对象，那么原型对象的对象原型指向哪个原型对象呢？这就引出了原型链的概念。<br>原型链<br><img src="https://cdn.nlark.com/yuque/0/2022/png/32424723/1660303609104-03b8a19f-8de9-4b83-8177-5de3cd788a43.png#clientId=ubf319281-f591-4&crop=0&crop=0&crop=1&crop=1&from=ui&height=474&id=ucd4f68b7&margin=%5Bobject%20Object%5D&name=%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202022-08-12%20192106.png&originHeight=632&originWidth=1168&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39123&status=done&style=none&taskId=u0c164079-1e77-4771-95b0-33adccaad31&title=&width=876" alt="屏幕截图 2022-08-12 192106.png"></p><ul><li>JavaScript 的成员查找机制(规则)<ol><li>当访问一个对象的属性（包括方法）时，首先查找这个<code>对象自身</code>有没有该属性。</li><li>如果没有就查找它的原型（也就是 __proto__指向的<code>prototype 原型对象</code>）。</li><li>如果还没有就查找原型对象的原型（<code>Object</code>的原型对象）。</li><li>依此类推一直找到 Object 为止（<code>null</code>）。</li><li>__proto__对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</li></ol></li><li>扩展内置对象</li></ul><p>可以通过原型对象，对原来的<code>内置对象</code>进行扩展自定义的方法。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sum</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">       sum += <span class="variable language_">this</span>[i];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> sum;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">sum</span>());</span><br></pre></td></tr></table></figure><p>数组和字符串内置对象不能给原型对象覆盖操作 Array.prototype &#x3D; {} ，只能是 Array.prototype.xxx &#x3D; function(){} 的方式。</p><h3 id="3、继承"><a href="#3、继承" class="headerlink" title="3、继承"></a>3、继承</h3><p>ES6之前并没有给我们提供 extends 继承。我们可以通过<code>构造函数+原型对象</code>模拟实现继承，被称为<code>组合继承</code>。</p><h4 id="（1）、call-方法"><a href="#（1）、call-方法" class="headerlink" title="（1）、call()方法"></a>（1）、call()方法</h4><ul><li>语法</li></ul><p><code>fun.call(thisArg, arg1, arg2, ...)</code></p><ul><li>thisArg ：当前调用函数 this 的指向对象（用来修改指向）</li><li>arg1，arg2：传递的其他参数</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> o = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//调用函数</span></span><br><span class="line">   <span class="comment">// fn.call();</span></span><br><span class="line">   <span class="comment">//改变this指向，传递参数</span></span><br><span class="line">   fn.<span class="title function_">call</span>(o, <span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="（2）、借用构造函数继承父类属性"><a href="#（2）、借用构造函数继承父类属性" class="headerlink" title="（2）、借用构造函数继承父类属性"></a>（2）、借用构造函数继承父类属性</h4><p>通过 call() 把父类型的 this 指向子类型的 this ，这样就可以实现子类型继承父类型的属性。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.父构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.子构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, age, score</span>) &#123;</span><br><span class="line">      <span class="comment">//调用父构造函数，修改this指向，这时指向子构造函数的实例对象</span></span><br><span class="line">      <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;andy&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(son);</span><br></pre></td></tr></table></figure><h4 id="（3）、借用构造函数继承父类方法"><a href="#（3）、借用构造函数继承父类方法" class="headerlink" title="（3）、借用构造函数继承父类方法"></a>（3）、借用构造函数继承父类方法</h4><p>一般情况下，对象的方法都在构造函数的原型对象中设置，通过构造函数无法继承父类方法。<br>如果我们直接让子类的原型对象等于父类的原型对象，虽然子类可以使用父类中的方法，但是当子类中添加自己的方法时，父类的原型对象会被覆盖。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.父构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">money</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.子构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, age, score</span>) &#123;</span><br><span class="line">      <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sex</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;andy&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line">    son.<span class="title function_">money</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure><p> 解决方法：</p><ul><li>将子类所共享的方法提取出来，让子类的<code>prototype 原型对象 = new 父类()</code>；</li><li>本质：子类原型对象等于是实例化父类，因为父类实例化之后另外开辟空间，就不会影响原来父类原型对象；</li><li>将子类的 constructor 从新指向子类的构造函数。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.父构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">money</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.子构造函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, age, score</span>) &#123;</span><br><span class="line">      <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//令Son的原型对象等于Father的实例对象，实例对象会去Father的原型对象里寻找需要的方法</span></span><br><span class="line">    <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">    <span class="comment">//被覆盖之后，重新指定构造函数</span></span><br><span class="line">    <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span>;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;andy&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);</span><br><span class="line">    son.<span class="title function_">money</span>();</span><br></pre></td></tr></table></figure><h4 id="（4）、类的本质"><a href="#（4）、类的本质" class="headerlink" title="（4）、类的本质"></a>（4）、类的本质</h4><ul><li>class本质还是function。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Star</span>);</span><br></pre></td></tr></table></figure><p><code>结果返回 ： function</code></p><ul><li>类的所有方法都定义在类的<code>prototype</code>属性上</li><li>类创建的实例,里面也有<code>proto</code> 指向类的prototype原型对象</li><li>ES6的类的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</li><li>ES6的类其实就是<code>语法糖</code>。</li><li>语法糖:语法糖就是一种便捷写法。简单理解, 有两种方法可以<code>实现同样的功能</code>, 但是一种写法更加清晰、方便,那么这个方法就是语法糖。</li></ul><h3 id="4、ES5中新增的方法"><a href="#4、ES5中新增的方法" class="headerlink" title="4、ES5中新增的方法"></a>4、ES5中新增的方法</h3><h4 id="（1）、数组方法"><a href="#（1）、数组方法" class="headerlink" title="（1）、数组方法"></a>（1）、数组方法</h4><p>迭代(遍历)方法：<code>forEach()</code>、<code>map()</code>、<code>filter()</code>、<code>some()</code>、<code>every()</code>；</p><ul><li>forEach()</li></ul><p>遍历数组，同时可以返回数组的每个元素值、索引号、数组本身。<br>语法 ：<code>array.forEach(function(currentValue, index, arr)&#123;&#125;)</code></p><ol><li>lcurrentValue：数组当前项的值</li><li>lindex：数组当前项的索引</li><li>larr：数组对象本身</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">   <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//循环</span></span><br><span class="line">   arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, index, array</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;每个数组元素&#x27;</span> + value);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;每个数组元素索引号&#x27;</span> + index);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数组本身&#x27;</span> + array);</span><br><span class="line">     sum += value;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure><ul><li>map()</li></ul><p>对原始数组中的每个元素运行传入函数，结果返回一个包含这些新元素的数组。语法、参数同上。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">var</span> arr1 = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);<span class="comment">//[2,4,6]</span></span><br></pre></td></tr></table></figure><ul><li>filter()</li></ul><p>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的<code>所有元素</code>，主要用于筛选数组。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">32</span>]</span><br><span class="line">   <span class="comment">//筛选,返回一个新数组</span></span><br><span class="line">   <span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">value, index</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> value &gt;= <span class="number">10</span>;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);<span class="comment">//[12,22,32]</span></span><br></pre></td></tr></table></figure><ul><li>some()</li></ul><p>检测数组中的元素是否满足指定条件，返回布尔值。如果找到<code>第一个</code>符合条件的元素，则<code>终止循环</code>，不再查找。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">13</span>, <span class="number">23</span>, <span class="number">34</span>, <span class="number">45</span>]</span><br><span class="line">    <span class="comment">//查找数组中是否有符合的，有返回true，没有返回false</span></span><br><span class="line">    <span class="keyword">var</span> flag = arr.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">value, index</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value &gt;= <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(flag);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>every()</li></ul><p>检测数组中所有的元素，判断是否<code>所有元素</code>都满足指定条件，返回布尔值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">var</span> flag = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="comment">// return value &gt; 1;//false</span></span><br><span class="line">      <span class="keyword">return</span> value &lt; <span class="number">4</span>;<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(flag);</span><br></pre></td></tr></table></figure><h4 id="（2）、字符串方法"><a href="#（2）、字符串方法" class="headerlink" title="（2）、字符串方法"></a>（2）、字符串方法</h4><ul><li>trim()</li></ul><p>str.trim()，清除原字符串两侧的空格，返回一个新字符串，对原字符串无影响。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//避免输入空格不弹出提示</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (input.<span class="property">value</span>.<span class="title function_">trim</span>() === <span class="string">&#x27;&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&#x27;请输入内容&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>.<span class="title function_">trim</span>().<span class="property">length</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">innerHTML</span> = input.<span class="property">value</span>.<span class="title function_">trim</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="（3）、对象方法"><a href="#（3）、对象方法" class="headerlink" title="（3）、对象方法"></a>（3）、对象方法</h4><ul><li>Object.keys(obj)<ol><li>用于获取对象自身所有的属性</li><li>返回一个由obj属性名组成的数组</li><li>效果类似  for … in</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj));</span><br></pre></td></tr></table></figure><ul><li>Object.defineProperty()</li></ul><p><code>Object.defineProperty(obj, prop, descriptor)</code>，定义对象中的新属性或修改原有的属性。</p><ol><li>lobj：目标对象；</li><li>lprop：需定义或修改的属性的名字；</li><li>descriptor：目标属性所拥有的特性。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;id&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="number">2</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;sex&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><p>第三个参数 descriptor 说明： 以对象形式 { } 书写。同时，{}中包含以下属性。</p><ol><li>value: 设置属性的值，默认为undefined。</li><li>writable: 值是否可以重写。true | false  默认为false。</li><li>enumerable: 目标属性是否可以被枚举。true | false默认为 false。</li><li>configurable: 目标属性是否可以被删除或是否可以再次修改特性 true | false  默认为false。</li></ol><h2 id="三、函数进阶"><a href="#三、函数进阶" class="headerlink" title="三、函数进阶"></a>三、函数进阶</h2><h3 id="1、函数的定义和调用"><a href="#1、函数的定义和调用" class="headerlink" title="1、函数的定义和调用"></a>1、函数的定义和调用</h3><h4 id="（1）、函数定义方式"><a href="#（1）、函数定义方式" class="headerlink" title="（1）、函数定义方式"></a>（1）、函数定义方式</h4><ul><li>函数声明方式 function 关键字 （命名函数）</li></ul><p><code>function fn() &#123;&#125;</code></p><ul><li>函数表达式（匿名函数）</li></ul><p><code>var fn = function() &#123;&#125;</code></p><ul><li>new Function()  (创建实例对象)</li></ul><p><code>var fn = new Function(&#39;参数1&#39;,&#39;参数2&#39;..., &#39;函数体&#39;)</code></p><ol><li>参数都是字符串格式</li><li>执行效率低，也不方便书写，因此较少使用</li></ol><p>通过第三种定义函数方式，可知所有函数都是Function的实例对象，<code>函数也属于对象</code>，因此我们得到函数的原型链。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32424723/1660717537379-d3f54b04-2212-46e5-9d11-42bc574e812f.jpeg#clientId=ua8307993-5566-4&crop=0&crop=0&crop=1&crop=1&from=ui&height=363&id=uc845d721&margin=%5Bobject%20Object%5D&name=%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1.jpg&originHeight=484&originWidth=872&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48520&status=done&style=none&taskId=u02ddd7f4-25fe-4f27-8a8e-d60b8b8579c&title=&width=654" alt="函数对象.jpg"></p><h4 id="（2）、函数的调用方式"><a href="#（2）、函数的调用方式" class="headerlink" title="（2）、函数的调用方式"></a>（2）、函数的调用方式</h4><ul><li>普通函数</li></ul><p><code>function fn() &#123;&#125;;</code><br><code>fn()</code></p><ul><li>对象的方法</li></ul><p><code>obj.say();</code></p><ul><li>构造函数</li></ul><p><code>var fn =new Star();</code></p><ul><li>绑定事件函数</li></ul><p><code>事件发生执行</code></p><ul><li>定时器函数</li></ul><p><code>定时时间到达执行</code></p><ul><li>立即执行函数</li></ul><h3 id="2、this"><a href="#2、this" class="headerlink" title="2、this"></a>2、this</h3><h4 id="（1）、函数内this指向"><a href="#（1）、函数内this指向" class="headerlink" title="（1）、函数内this指向"></a>（1）、函数内this指向</h4><p>调用方式的不同决定了this 的指向不同，一般指向函数的调用者。</p><table><thead><tr><th>调用方式</th><th>this指向</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td></tr><tr><td>构造函数调用</td><td>实例对象、原型对象里的方法也指向实例对象</td></tr><tr><td>对象方法调用</td><td>该方法属于的对象</td></tr><tr><td>事件绑定方法</td><td>绑定事件对象</td></tr><tr><td>定时器函数</td><td>window</td></tr><tr><td>立即执行函数</td><td>window</td></tr></tbody></table><h4 id="（2）、改变函数内this指向"><a href="#（2）、改变函数内this指向" class="headerlink" title="（2）、改变函数内this指向"></a>（2）、改变函数内this指向</h4><p>JavaScript 为我们专门提供了一些函数方法来帮我们更优雅的处理函数内部 this 的指向问题，常用的有<code>call()</code>、<code>apply()</code>、<code>bind()</code> 三种方法。</p><ul><li>call（）方法</li></ul><p>call() 方法<code>调用</code>一个对象。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。<br>语法：<code>fun.call(thisArg, arg1, arg2, ...)</code></p><ol><li>thisArg ：当前调用函数 this 的指向对象（用来修改指向）；</li><li>arg1，arg2：传递的其他参数；</li><li>因此当想改变 this 指向，同时想调用这个函数的时候，可以使用 call，比如继承。</li></ol><ul><li>apply()方法</li></ul><p>apply() 方法<code>调用</code>一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指向。<br>语法：<code>fun.apply(thisArg, [argsArray])</code></p><ol><li>thisArg：在fun函数运行时指定的 this 值；</li><li>argsArray：传递的值，必须包含在<code>数组</code>里面；</li><li>返回值就是函数的返回值，因为它就是调用函数；</li><li>apply 主要跟数组有关系，比如使用 Math.max() 求数组的最大值。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//&#x27;andy&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//传递参数必须是数组（伪数组）</span></span><br><span class="line">   fn.<span class="title function_">apply</span>(o, [<span class="string">&#x27;andy&#x27;</span>]);</span><br><span class="line">   <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">22</span>, <span class="number">3</span>, <span class="number">45</span>];</span><br><span class="line">   <span class="comment">//调用Math里的max方法，将arr里的值传递过去</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr));</span><br></pre></td></tr></table></figure><p>虽然传递的是数组形式的参数，但是函数输出的是数组内对应类型的数据。</p><ul><li>bind()方法</li></ul><p>bind() 方法<code>不会调用</code>函数。但是能改变函数内部this 指向。<br>语法：<code>fun.bind(thisArg, arg1, arg2, ...)</code></p><ol><li>thisArg：在 fun 函数运行时指定的 this 值；</li><li>arg1，arg2：传递的其他参数；</li><li>返回由指定的 this 值和初始化参数改造的原函数拷贝；</li><li>因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用 bind。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;点击&lt;/button&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span>;<span class="comment">//不更改的话，这里的this指向window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">3000</span>);<span class="comment">//bind里的this在定时器函数外，指向btn</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>区别分析<ol><li>call 和 apply  会调用函数, 并且改变函数内部this指向；</li><li>call 和 apply 传递的参数不一样, call 传递参数 （aru1, aru2..）形式，apply 必须数组形式[arg]；</li><li>bind  不会调用函数, 可以改变函数内部this指向。</li></ol></li></ul><h3 id="3、严格模式"><a href="#3、严格模式" class="headerlink" title="3、严格模式"></a>3、严格模式</h3><h4 id="（1）、什么是严格模式"><a href="#（1）、什么是严格模式" class="headerlink" title="（1）、什么是严格模式"></a>（1）、什么是严格模式</h4><p>JavaScript 除了提供正常模式外，还提供了<code>严格模式（strict mode）</code>，即在严格的条件下运行JS 代码。严格模式在 IE10 以上版本的浏览器中才会被支持，旧版本浏览器中会被忽略。</p><ul><li>严格模式对正常的 JavaScript 语义做了一些更改：<ol><li>消除了Javascript语法的一些不合理、不严谨之处，减少了一些怪异行为；</li><li>消除代码运行的一些不安全之处，保证代码运行的安全；</li><li>提高编译器效率，增加运行速度；</li><li>禁用了在 ECMAScript的未来版本中可能会定义的一些语法，为未来新版本的Javascript做好铺垫。比如一些保留字如：class, enum, export, extends, import, super 不能做变量名。</li></ol></li></ul><h4 id="（2）、开启严格模式"><a href="#（2）、开启严格模式" class="headerlink" title="（2）、开启严格模式"></a>（2）、开启严格模式</h4><p>严格模式可以应用到<code>整个脚本</code>或<code>个别函数</code>中。因此在使用时，我们可以将严格模式分为<code>为脚本开启严格模式</code>和<code>为函数开启严格模式</code>两种情况。</p><ul><li>为脚本开启严格模式</li></ul><p>为整个脚本文件开启严格模式，需要在所有语句之前放一个特定语句”use strict”;（或   ‘use strict’;）。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">　　<span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">　　<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是严格模式。&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>有的 script 基本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的<code>匿名函数之中</code>。这样独立<code>创建一个作用域</code>而不影响其他 script 脚本文件。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">　　　　<span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">       <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">　　　　<span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">　  &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>为函数开启严格模式</li></ul><p>要给某个函数开启严格模式，需要把”use strict”;  (或 ‘use strict’; ) 声明放在<code>函数体所有语句之前</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">　　<span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">　　<span class="keyword">return</span> <span class="string">&quot;这是严格模式。&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）、严格模式中的变化"><a href="#（3）、严格模式中的变化" class="headerlink" title="（3）、严格模式中的变化"></a>（3）、严格模式中的变化</h4><ul><li>变量规定<ol><li>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，变量都必须<code>先用var命令声明</code>，然后再使用；</li><li><code>严禁删除</code>已经声明变量。例如，delete x; 语法是错误的。</li></ol></li><li>严格模式下的this指向问题<ol><li>严格模式下，全局作用域中this仍指向window；</li><li>全局作用域中的函数中，this指向<code>undefined</code>；</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();   <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ol start="3"><li>严格模式下,如果 构造函数不加new调用, this 指向的是<code>undefined</code>，如果给他赋值则会报错，new 实例化的构造函数指向创建的对象实例；</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Con</span>(<span class="params">name, age</span>) &#123;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;  </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// Con &#123;name: &quot;con&quot;, age: 3&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> con = <span class="keyword">new</span> <span class="title class_">Con</span>(<span class="string">&#x27;con&#x27;</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>定时器 this 还是指向 window ；</li><li>事件、对象还是指向调用者。</li></ol><ul><li>函数变化<ol><li>函数不允许有重名的<code>参数</code>；</li><li>函数必须声明在<code>顶层</code>，不允许在非函数的代码块内声明函数。</li></ol></li></ul><p>更多严格模式格式要求：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode</a></p><h3 id="4、高阶函数"><a href="#4、高阶函数" class="headerlink" title="4、高阶函数"></a>4、高阶函数</h3><p>高阶函数是对其他函数进行操作的函数，它<code>接收函数作为参数</code>或<code>将函数作为返回值输出</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数可以当做参数传递</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, callback</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span><br><span class="line">      callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;last&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">//3  last</span></span><br></pre></td></tr></table></figure><p>此时fn就是一个高阶函数。<br>函数也是一种<code>数据类型</code>，同样可以作为参数，传递给另外一个参数使用。 最典型的就是作为<code>回调函数</code>。同理函数也可以作为返回值传递回来。</p><h3 id="5、闭包"><a href="#5、闭包" class="headerlink" title="5、闭包"></a>5、闭包</h3><h4 id="（1）、变量作用域"><a href="#（1）、变量作用域" class="headerlink" title="（1）、变量作用域"></a>（1）、变量作用域</h4><ul><li>变量根据作用域的不同分为两种：<code>局部变量</code>和<code>全局变量</code>。<ol><li>函数内部可以使用全局变量；</li><li>函数外部不能使用局部变量；</li><li>本作用域内的局部变量会在函数执行完成后销毁。</li></ol></li></ul><h4 id="（2）、闭包"><a href="#（2）、闭包" class="headerlink" title="（2）、闭包"></a>（2）、闭包</h4><p>闭包（closure）指有权访问另一个函数作用域中变量的<code>函数</code>。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>)&#123;    <span class="comment">// fn1 就是闭包函数</span></span><br><span class="line">　　　　<span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">　　　　<span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>)&#123;</span><br><span class="line">　　　　　　<span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//10 fn2 中访问了fn1中的变量</span></span><br><span class="line">　　　　&#125;</span><br><span class="line">       <span class="title function_">fn2</span>()</span><br><span class="line">　&#125;</span><br><span class="line">  <span class="title function_">fn1</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（3）、闭包的作用"><a href="#（3）、闭包的作用" class="headerlink" title="（3）、闭包的作用"></a>（3）、闭包的作用</h4><p>通过一段代码来看</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fun;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="title function_">fn</span>();<span class="comment">//类似于f=fun</span></span><br><span class="line">    <span class="title function_">f</span>();<span class="comment">//在外部访问了fn里的变量</span></span><br></pre></td></tr></table></figure><p>在上面的代码块中，可以发现我们在fn()函数外部访问了它内部的局部变量num，因此闭包的作用就是延伸了变量的作用范围。</p><h4 id="（4）、闭包案例分析"><a href="#（4）、闭包案例分析" class="headerlink" title="（4）、闭包案例分析"></a>（4）、闭包案例分析</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul <span class="keyword">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>臭豆腐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>鲱鱼罐头<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>大猪蹄子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"> &lt;/ul&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//动态添加获取li索引号</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">//利用闭包获取</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">//生成四个立即执行函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       lis[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;)(i);<span class="comment">//接收for里的i，再传递给function</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>循环一次生成一个立即执行函数；</li><li>每一个立即执行函数都接收循环时的i作为参数；</li><li>循环结束后，点击li，执行异步任务，输出的i就是传入立即执行函数的i；</li><li>输出的函数使用了立即执行函数内的变量，形成闭包。</li></ul><h3 id="6、递归"><a href="#6、递归" class="headerlink" title="6、递归"></a>6、递归</h3><h4 id="（1）、递归"><a href="#（1）、递归" class="headerlink" title="（1）、递归"></a>（1）、递归</h4><ul><li>如果一个函数可以在内部<code>调用其本身</code>， 那么这个函数就是递归函数；</li><li>递归函数的作用和循环效果一样；</li><li>由于递归很容易发生<code>“栈溢出”</code>错误（stack overflow），所以必须要加退出条件 return。</li></ul><h4 id="（2）、递归应用"><a href="#（2）、递归应用" class="headerlink" title="（2）、递归应用"></a>（2）、递归应用</h4><ul><li>求1<em>2</em>3*…….*n阶乘</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n*<span class="title function_">fn</span>(n-<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">4</span>));<span class="comment">//24</span></span><br></pre></td></tr></table></figure><ul><li>斐波那契数列</li></ul><p>斐波那契数列：又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……前两位数字为1，从第三位开始，该位上的数为前两位上的数的和。求输入位上的数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">fn</span>(n - <span class="number">1</span>) + <span class="title function_">fn</span>(n - <span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">4</span>));<span class="comment">//3</span></span><br></pre></td></tr></table></figure><ul><li>根据id返回对应的数据对象</li></ul><p>主要思路：创建一个封装函数，将数组名和id作为形参，再对数组进行遍历。如果数组中的对象的id和输入的id（实参）相同，则将这个对象存入准备好的空对象中。但是这样只能拿到外层的数据，因此，加入判断条件。当对象中有goods这个属性且属性值不为空时，将items.goods作为实参再次调用封装函数，获取深层数据。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;家电&#x27;</span>,</span><br><span class="line">     <span class="attr">goods</span>: [&#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">       <span class="attr">gname</span>: <span class="string">&#x27;冰箱&#x27;</span>,</span><br><span class="line">       <span class="attr">goods</span>: [&#123;</span><br><span class="line">         <span class="attr">id</span>: <span class="number">111</span>,</span><br><span class="line">         <span class="attr">gname</span>: <span class="string">&#x27;海尔&#x27;</span></span><br><span class="line">       &#125;, &#123;</span><br><span class="line">         <span class="attr">id</span>: <span class="number">112</span>,</span><br><span class="line">         <span class="attr">gname</span>: <span class="string">&#x27;美的&#x27;</span></span><br><span class="line">       &#125;,]</span><br><span class="line">     &#125;, &#123;</span><br><span class="line">       <span class="attr">id</span>: <span class="number">12</span>,</span><br><span class="line">       <span class="attr">gname</span>: <span class="string">&#x27;洗衣机&#x27;</span></span><br><span class="line">     &#125;]</span><br><span class="line">   &#125;, &#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;服饰&#x27;</span></span><br><span class="line">   &#125;];</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getID</span>(<span class="params">json, id</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">     json.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (item.<span class="property">id</span> == id) &#123;<span class="comment">//拿到外层的值</span></span><br><span class="line">         o = item;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">goods</span> &amp;&amp; item.<span class="property">goods</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         o = <span class="title function_">getID</span>(item.<span class="property">goods</span>, id);<span class="comment">//输入id=11，上一个条件不满足，再递归循环item.goods</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="keyword">return</span> o;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getID</span>(data, <span class="number">1</span>));</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getID</span>(data, <span class="number">11</span>));</span><br></pre></td></tr></table></figure><h4 id="（3）、浅拷贝和深拷贝"><a href="#（3）、浅拷贝和深拷贝" class="headerlink" title="（3）、浅拷贝和深拷贝"></a>（3）、浅拷贝和深拷贝</h4><ul><li>浅拷贝<ol><li>浅拷贝只是拷贝一层, 而对于更深层次的对象只拷贝引用（拷贝地址），会影响原数据。</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">      <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">      <span class="attr">msg</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      o[k] = obj[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line">    o.<span class="property">msg</span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);<span class="comment">//obj.msg内的age也会变为20</span></span><br></pre></td></tr></table></figure><ol start="2"><li>浅拷贝语法糖</li></ol><p><code>Object.assign(target,sources)</code><br>target:拷贝给谁；<br>sources:被拷贝的对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">      <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">      <span class="attr">msg</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(o, obj);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br></pre></td></tr></table></figure><ul><li>深拷贝<ol><li>拷贝多层，每一级别的数据都会拷贝，对于复杂数据类型，开括一个新的内存空间来存储，不影响原数据。</li><li>实现思路：对复杂数据类型再次遍历，获取内部元素，相当于递归。</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">     <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">     <span class="attr">msg</span>: &#123;</span><br><span class="line">       <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">color</span>: [<span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;red&#x27;</span>]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newobj, oldobj</span>) &#123;</span><br><span class="line">     <span class="comment">//拷贝的时候，对于复杂数据类型，要进行深拷贝</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> oldobj) &#123;</span><br><span class="line">       <span class="keyword">var</span> item = oldobj[k];</span><br><span class="line">       <span class="comment">//判断是否为数组</span></span><br><span class="line">       <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">         <span class="comment">//如果为数组，先将newobj定义为数组，再递归，将item中的值赋给 newobj[k]</span></span><br><span class="line">         newobj[k] = [];</span><br><span class="line">         <span class="title function_">deepCopy</span>(newobj[k], item);</span><br><span class="line">         <span class="comment">//判断是否为对象</span></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">         newobj[k] = &#123;&#125;;</span><br><span class="line">         <span class="title function_">deepCopy</span>(newobj[k], item);</span><br><span class="line">         <span class="comment">//判断是否为简单数据类型</span></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         newobj[k] = item;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="title function_">deepCopy</span>(o, obj);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br></pre></td></tr></table></figure><h2 id="四、正则表达式"><a href="#四、正则表达式" class="headerlink" title="四、正则表达式"></a>四、正则表达式</h2><h3 id="1、正则表达式"><a href="#1、正则表达式" class="headerlink" title="1、正则表达式"></a>1、正则表达式</h3><h4 id="（1）、什么是正则表达式"><a href="#（1）、什么是正则表达式" class="headerlink" title="（1）、什么是正则表达式"></a>（1）、什么是正则表达式</h4><p>正则表达式（Regular Expression ）是用于<code>匹配</code>字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。<br>正则表通常被用来检索、替换那些符合某个模式（<code>规则</code>）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(<code>匹配</code>)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(<code>替换</code>)，或从字符串中获取我们想要的特定部分(<code>提取</code>)等 。</p><h4 id="（2）、正则表达式的特点"><a href="#（2）、正则表达式的特点" class="headerlink" title="（2）、正则表达式的特点"></a>（2）、正则表达式的特点</h4><ul><li>灵活性、逻辑性和功能性非常的强；</li><li>可以迅速地用极简单的方式达到字符串的复杂控制。</li></ul><h3 id="2、正则表达式的使用"><a href="#2、正则表达式的使用" class="headerlink" title="2、正则表达式的使用"></a>2、正则表达式的使用</h3><h4 id="（1）、创建正则表达式"><a href="#（1）、创建正则表达式" class="headerlink" title="（1）、创建正则表达式"></a>（1）、创建正则表达式</h4><ul><li>通过调用 RegExp对象的构造函数创建</li></ul><p><code>var 变量名 = new RegExp(/表达式/);</code></p><ul><li>通过字面量创建</li></ul><p><code>var 变量名 = /表达式/;</code></p><h4 id="（2）、测试正则表达式test"><a href="#（2）、测试正则表达式test" class="headerlink" title="（2）、测试正则表达式test"></a>（2）、测试正则表达式test</h4><p>test() 正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或false，其参数是测试<code>字符串</code>。<br><code>regexObj.test(str)</code></p><ul><li>regexObj ：写的正则表达式；</li><li>str： 要测试的文本；</li><li>检测str文本是否符合写的正则表达式规范。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用对象类创建</span></span><br><span class="line">    <span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/123/</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用字面量来创建</span></span><br><span class="line">    <span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br><span class="line">    <span class="comment">//验证</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="number">123</span>));<span class="comment">//true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="3、正则表达式中的特殊字符"><a href="#3、正则表达式中的特殊字符" class="headerlink" title="3、正则表达式中的特殊字符"></a>3、正则表达式中的特殊字符</h3><h4 id="（1）、正则表达式的组成"><a href="#（1）、正则表达式的组成" class="headerlink" title="（1）、正则表达式的组成"></a>（1）、正则表达式的组成</h4><p>一个正则表达式可以由简单的字符构成，比如 &#x2F;abc&#x2F;，也可以是简单和特殊字符的组合，比如 &#x2F;ab*c&#x2F; 。其中特殊字符也被称为<code>元字符</code>，在正则表达式中是具有特殊意义的专用符号，如 ^ 、$ 、+ 等。</p><h4 id="（2）、边界符"><a href="#（2）、边界符" class="headerlink" title="（2）、边界符"></a>（2）、边界符</h4><p>正则表达式中的边界符（位置符）用来<code>提示字符所处的位置</code>，主要有两个字符。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/32424723/1661235605554-9608a496-871c-4c5e-a278-fa675e8023f6.png#clientId=ud4ceaa42-9831-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=u8f0a2658&margin=%5Bobject%20Object%5D&name=%E5%9B%BE%E7%89%871.png&originHeight=116&originWidth=735&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21336&status=done&style=none&taskId=u88484d36-c5f9-4301-b747-a46f46e4d09&title=" alt="图片1.png"><br>如果 ^ 和 $ 在一起，表示必须是精确匹配。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/abc/</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>));<span class="comment">//true</span></span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^abc/</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>));<span class="comment">//false</span></span><br><span class="line">    <span class="keyword">var</span> rege = <span class="regexp">/^abc$/</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rege.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rege.<span class="title function_">test</span>(<span class="string">&#x27;abcabc&#x27;</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="（3）、字符类"><a href="#（3）、字符类" class="headerlink" title="（3）、字符类"></a>（3）、字符类</h4><p>字符类表示有一系列字符可供选择，只要<code>匹配其中一个</code>就可以了。所有可供选择的字符都放在方括号内。</p><ul><li>[  ]   方括号</li></ul><p><code>/[abc]/.test(&#39;andy&#39;)     // true</code><br>后面的字符串只要包含 abc中任意一个字符，都返回 true 。<br><code>/^[abc]$/.test(&#39;a&#39;)     //  true</code><br>加了边界符后，只有当字符串是符合添加的单个字符时才返回true。</p><ul><li>[-]   方括号内部范围符</li></ul><p><code>/^[a-z]$/.test(c&#39;)     // true</code><br>方括号内部加上<code>-</code>表示<code>范围</code>，这里表示 a 到 z 任意一个26个英文字母都可以。</p><ul><li>[^]  方括号内部取反符^</li></ul><p><code>/[^abc]/.test(&#39;andy&#39;) // false</code><br>方括号内部加上 ^ 表示<code>取反</code>，只要包含方括号内的字符，都返回 false 。<br>注意和边界符的区别。</p><ul><li>字符组合</li></ul><p><code>/[a-z1-9]/.test(&#39;andy&#39;) //true</code><br>方括号内部可以使用<code>字符组合</code>，这里表示包含 a 到 z 的26个英文字母和 1 到 9 的数字都可以。</p><h4 id="（4）、量词符"><a href="#（4）、量词符" class="headerlink" title="（4）、量词符"></a>（4）、量词符</h4><p>量词符用于设定<code>某个模式出现的次数</code>。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/32424723/1661236879975-77d2b037-0bd5-4a5f-9fc6-0cc456b3dd14.png#clientId=ud4ceaa42-9831-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=ue39ded55&margin=%5Bobject%20Object%5D&name=%E9%87%8F%E8%AF%8D%E7%AC%A6.png&originHeight=235&originWidth=684&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30127&status=done&style=none&taskId=ue782c248-dd33-4589-86b7-37c6a0837b5&title=" alt="量词符.png"></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">    span &#123;</span><br><span class="line">      <span class="attr">color</span>: #aaa;</span><br><span class="line">      font-<span class="attr">size</span>: 14px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .<span class="property">right</span> &#123;</span><br><span class="line">      <span class="attr">color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .<span class="property">wrong</span> &#123;</span><br><span class="line">      <span class="attr">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;uname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>;<span class="comment">//输入6-16位</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> uname = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.uname&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    uname.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">value</span>)) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&#x27;输入正确&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        span.<span class="property">innerHTML</span> = <span class="string">&#x27;欢迎登陆&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        span.<span class="property">className</span> = <span class="string">&#x27;right&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&#x27;输入错误&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        span.<span class="property">innerHTML</span> = <span class="string">&#x27;请重新输入&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        span.<span class="property">className</span> = <span class="string">&#x27;wrong&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="（5）、优先级"><a href="#（5）、优先级" class="headerlink" title="（5）、优先级"></a>（5）、优先级</h4><ul><li>对于这样一个正则表达式：<code>var  reg = /^abc&#123;3&#125;$/</code>，这个表示字符串需要含有<code>三个c</code>才满足条件。</li></ul><p><code>reg.test(&#39;abccc&#39;)    //true</code></p><ul><li>而加上<code>小括号()</code>，可以提升优先级。</li></ul><p><code>var  reg = /^(abc)&#123;3&#125;$/</code><br><code>reg.test(&#39;abcabcabc&#39;);   //true</code></p><h4 id="（6）、预定义类"><a href="#（6）、预定义类" class="headerlink" title="（6）、预定义类"></a>（6）、预定义类</h4><p>预定义类指的是某些常见模式的<code>简写方式</code>。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/32424723/1661237766588-358ee56f-ff33-4a16-81df-428409b6d48d.png#clientId=ud4ceaa42-9831-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=ud017d1c4&margin=%5Bobject%20Object%5D&name=%E9%A2%84%E5%AE%9A%E4%B9%89%E7%B1%BB.png&originHeight=240&originWidth=697&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67853&status=done&style=none&taskId=u8535a999-4ed5-4a50-895e-afaf1bae4be&title=" alt="预定义类.png"></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//验证两种格式 010-12345678 或者 0520-1234567</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//正则里|表示或，注意不要有空格</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  ipt.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(ipt.<span class="property">value</span>)) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;输入正确&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;输入错误&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="4、正则表达式中的替换"><a href="#4、正则表达式中的替换" class="headerlink" title="4、正则表达式中的替换"></a>4、正则表达式中的替换</h3><h4 id="（1）、replace-替换"><a href="#（1）、replace-替换" class="headerlink" title="（1）、replace 替换"></a>（1）、replace 替换</h4><p>replace() 方法可以实现<code>替换字符串</code>操作，用来替换的参数可以是一个<code>字符串</code>或是一个<code>正则表达式</code>。<br><code>stringObject.replace(regexp/substr,replacement)</code></p><ol><li>第一个参数:   被替换的字符串 或者  正则表达式；</li><li>第二个参数:   替换为的字符串；</li><li>返回值是一个替换完毕的新字符串。</li></ol><h4 id="（2）、正则表达式参数"><a href="#（2）、正则表达式参数" class="headerlink" title="（2）、正则表达式参数"></a>（2）、正则表达式参数</h4><p><code>/表达式/[switch]</code><br>switch(也称为修饰符) 按照什么样的模式来匹配。有三种值：</p><ul><li>g：全局匹配；</li><li>i：忽略大小写；</li><li>gi：全局匹配+ 忽略大小写。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    textarea &#123;</span><br><span class="line">      <span class="attr">width</span>: 300px;</span><br><span class="line">      <span class="attr">height</span>: 100px;</span><br><span class="line">      <span class="attr">border</span>: 1px solid #ccc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div &#123;</span><br><span class="line">      <span class="attr">width</span>: 300px;</span><br><span class="line">      <span class="attr">height</span>: 100px;</span><br><span class="line">      background-<span class="attr">color</span>: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#message&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      div.<span class="property">innerHTML</span> = text.<span class="property">value</span>.<span class="title function_">replace</span>(<span class="regexp">/[a-z]/gi</span>, <span class="string">&#x27;0&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="五、ES6"><a href="#五、ES6" class="headerlink" title="五、ES6"></a>五、ES6</h2><h3 id="1、ES6中新增语法"><a href="#1、ES6中新增语法" class="headerlink" title="1、ES6中新增语法"></a>1、ES6中新增语法</h3><h4 id="（1）、let"><a href="#（1）、let" class="headerlink" title="（1）、let"></a>（1）、let</h4><p>ES6中新增声明变量的关键词。</p><ul><li>let声明的变量只在所处的块作用域有效</li></ul><p>let声明变量时会创建一个块作用域，而变量只在这个块作用域内生效</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a is not defined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用var声明的变量不具备块级作用域特性。</p><ul><li>let不存在变量提升</li></ul><p><code>console.log(a); //a is not defined</code><br><code>let a =10;</code></p><ul><li>暂时性死区</li></ul><p>let声明的变量会和块级作用域进行绑定，而如果全局作用域内有一个同名变量，并不会对块级作用域内的变量产生影响。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(num);<span class="comment">// Cannot access &#x27;num&#x27; before initialization</span></span><br><span class="line">      <span class="keyword">let</span> num = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="（2）、let案例分析"><a href="#（2）、let案例分析" class="headerlink" title="（2）、let案例分析"></a>（2）、let案例分析</h4><ul><li>使用var定义变量</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">     arr[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(i); </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> arr[<span class="number">0</span>]();<span class="comment">//2</span></span><br><span class="line"> arr[<span class="number">1</span>]();<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>思路分析：当i&#x3D;2时，循环体结束，arr[i]中存放一个函数，没有执行。接着开始执行arr<a href="">0</a>，相当于执行函数体，输出i，此时i为全局变量且值为2，则输出结果都为2。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/32424723/1661304195455-ecae5000-2b33-43c1-a503-d68dfcc7150c.png#clientId=ucdec72ce-e02e-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=u116c6103&margin=%5Bobject%20Object%5D&name=var.png&originHeight=280&originWidth=452&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3734&status=done&style=none&taskId=u668423e8-8575-4b33-9c42-22031296a5c&title=" alt="var.png"></p><ul><li>使用let定义变量</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">     arr[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(i); </span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> arr[<span class="number">0</span>]();<span class="comment">//0</span></span><br><span class="line"> arr[<span class="number">1</span>]();<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>思路分析：let定义i时会形成一个块级作用域，而这个作用域就会存放arr[0],arr[1]，循环结束后，输出的值就是作用域内i的值。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/32424723/1661304538035-9259893b-eaf1-4914-95b7-039d14a29753.png#clientId=ucdec72ce-e02e-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=ua67f3e99&margin=%5Bobject%20Object%5D&name=let.png&originHeight=280&originWidth=452&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3941&status=done&style=none&taskId=uf713a7e2-db80-4b1d-bfd7-57ec70a2f10&title=" alt="let.png"></p><h4 id="（3）、const"><a href="#（3）、const" class="headerlink" title="（3）、const"></a>（3）、const</h4><p>声明常量，常量就是值（内存地址）不能变化的量。</p><ul><li>具有块级作用域</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">     <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure><ul><li>声明常量必须赋值</li></ul><p><code>const PI;// Missing initializer in const declaration</code></p><ul><li>常量赋值后，值不能更改。</li></ul><p><code>const PI =3.14;</code><br><code>PI =100;// Assignment to constant variable.</code><br>但对于数组&#x2F;对象，可以改变数组元素&#x2F;属性的值，但不能直接改变数组&#x2F;对象的值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ary = [<span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line">    ary[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>; </span><br><span class="line">    ary[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ary); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;]; </span></span><br><span class="line">    ary = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]; <span class="comment">// Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h4 id="（4）、var、let、const区别"><a href="#（4）、var、let、const区别" class="headerlink" title="（4）、var、let、const区别"></a>（4）、var、let、const区别</h4><ul><li>使用 var声明的变量，其作用域为该语句所在的<code>函数内</code>，且<code>存在变量提升</code>现象。</li><li>使用 let声明的变量，其作用域为该语句所在的<code>代码块内</code>，<code>不存在变量提升</code>。</li><li>使用 const声明的是常量，在后面出现的代码中<code>不能再修改该常量的值</code>。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32424723/1661306076087-f6538363-d130-4bc7-8924-8b2921f27534.png#clientId=ucdec72ce-e02e-4&crop=0&crop=0&crop=1&crop=1&from=ui&id=u3f07833d&margin=%5Bobject%20Object%5D&name=%E5%A3%B0%E6%98%8E%E5%8C%BA%E5%88%AB.png&originHeight=247&originWidth=1007&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14117&status=done&style=none&taskId=uf4198cc9-1e8d-4cc5-a784-477c7f45d50&title=" alt="声明区别.png"></p><h4 id="（5）、解构赋值"><a href="#（5）、解构赋值" class="headerlink" title="（5）、解构赋值"></a>（5）、解构赋值</h4><p>ES6中允许从数组中提取值，按照对应位置，对变量赋值。对象也可以实现解构。按照一定模式，从数组中或对象中<code>提取值</code>，将提取出来的值<code>赋值给另外的变量</code>。</p><ul><li>数组解构</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">let</span> [a, b, c] = arr;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">    <span class="comment">//如果解构不成功</span></span><br><span class="line">    <span class="keyword">let</span> [e] = [];</span><br><span class="line">    <span class="keyword">let</span> [f, g] = [<span class="number">3</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);<span class="comment">//undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(f);<span class="comment">//3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(g);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>如果变量对应位置为空，则输出undefined。</p><ul><li>对象解构</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">let</span> &#123; name, age &#125; = person;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">   <span class="comment">//此时name只用于匹配</span></span><br><span class="line">   <span class="keyword">let</span> &#123; <span class="attr">name</span>: myName, <span class="attr">age</span>: myAge &#125; = person;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(myName);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(myAge);</span><br></pre></td></tr></table></figure><p>对象解构时，变量名要和属性名对应，否则输出undefined。添加别名后（name:myName)，输出的是别名(myName),name只用于和属性名匹配。</p><h4 id="（6）、箭头函数"><a href="#（6）、箭头函数" class="headerlink" title="（6）、箭头函数"></a>（6）、箭头函数</h4><p>ES6中新增定义函数的方法。</p><ul><li>函数格式</li></ul><p><code>(形参)=&gt;&#123;函数体&#125;</code>&#x2F;&#x2F;匿名函数<br><code>const fn=(形参)=&gt;&#123;函数体&#125;</code>&#x2F;&#x2F;方便调用</p><ul><li>简写形式<ol><li>当函数体中只有一句代码，且代码的执行结果就是返回值，可以省略大括号。</li><li>当形参只有一个时，可以省略小括号。</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (v) &#123;</span><br><span class="line">     <span class="keyword">return</span> v;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">fn</span> = v =&gt; v;</span><br></pre></td></tr></table></figure><ul><li>this指向<ol><li>箭头函数不绑定this关键字，箭头函数中的this，指向的是<code>函数定义位置的上下文this</code>（外层作用域中最接近自己的普通函数的this）。</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span> &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> resFn = fn.<span class="title function_">call</span>(obj);</span><br><span class="line">    <span class="title function_">resFn</span>();</span><br><span class="line"><span class="comment">//&#123; name: &#x27;张三&#x27; &#125;</span></span><br><span class="line"><span class="comment">//&#123; name: &#x27;张三&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>代码分析：声明一个常量obj；创建一个函数fn()，函数体为打印函数的this指向（window），结果返回一个箭头函数（与fn函数this指向相同，window）；fn.call(obj)，调用函数fn并改变this指向为obj对象，调用函数打印this指向（obj），结果返回箭头函数，赋值给resFn（const resFn&#x3D;  () &#x3D;&gt;{ console.log(this)}。执行resFn函数，输出箭头函数的this指向（同fn函数this指向，obj）。</p><ol start="2"><li>对象中的方法</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;wangwu&#x27;</span>;</span><br><span class="line">   <span class="comment">// 对象没有作用域，箭头函数是被定义在window下</span></span><br><span class="line">   <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">     <span class="attr">say</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   obj1.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure><p>对象中不存在作用域，因此箭头函数相当于定义在window下，this也指向window。</p><ul><li>案例分析</li></ul><p> 实现点击div块两秒后变换背景颜色。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div &#123;</span><br><span class="line">      <span class="attr">width</span>: 100px;</span><br><span class="line">      <span class="attr">height</span>: 100px;</span><br><span class="line">      background-<span class="attr">color</span>: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ad&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> ad = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ad&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ad.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//箭头函数静态指向定义函数作用域this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;yellow&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;, <span class="number">2000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>思路分析：定时器中this指向window，如果使用普通函数，需要在定时器外声明一个变量等于事件对象的this指向。而使用箭头函数时，箭头函数是被定义在事件的函数作用域内，this指向事件对象。</p><h4 id="（7）、剩余参数"><a href="#（7）、剩余参数" class="headerlink" title="（7）、剩余参数"></a>（7）、剩余参数</h4><p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组。</p><ul><li>剩余参数</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (first, ...args) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(first); <span class="comment">// 10</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">// [20, 30] </span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure><ul><li>剩余参数和解构配合使用</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>];</span><br><span class="line">    <span class="keyword">let</span> [s1, ...s2] = arr1;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s1);<span class="comment">//&#x27;张三&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s2);<span class="comment">//[&#x27;lisi&#x27;,&#x27;wangwu&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="2、ES6的内置对象扩展"><a href="#2、ES6的内置对象扩展" class="headerlink" title="2、ES6的内置对象扩展"></a>2、ES6的内置对象扩展</h3><h4 id="（1）、Array的扩展方法"><a href="#（1）、Array的扩展方法" class="headerlink" title="（1）、Array的扩展方法"></a>（1）、Array的扩展方法</h4><ul><li>扩展运算符（展开语法）</li></ul><p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"> <span class="comment">//...ary  // 1, 2, 3</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(...ary);    <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><ul><li>扩展运算符应用于合并数组</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(...arr);</span><br><span class="line">   <span class="comment">//合并数组</span></span><br><span class="line">   <span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">   <span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">   <span class="keyword">let</span> arr3 = [...arr1, ...arr2];</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(arr3);<span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line">   arr1.<span class="title function_">push</span>(...arr2);<span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br></pre></td></tr></table></figure><ul><li>扩展运算符转换伪数组</li></ul><p>伪数组的主要特征：它是一个<code>对象</code>，并且该对象有 <code>length 属性</code>，可以遍历，也可以查询长度。但却<code>不能调用数组的方法</code>。比如 push、pop 等方法。除了<code>arguments</code> 之外，NodeList 对象<code>表示节点的集合</code>也是伪数组，比如通过 document.querySelectorAll 获取的节点集合等。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(divs <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">//true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//采用扩展</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> ary = [...divs];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ary);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ary.<span class="title function_">push</span>(<span class="string">&#x27;a&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ary)；</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>构造函数方法（Array.from）</li></ul><p>将伪数组或可遍历对象转换为真正的数组。<br><code>Array.from(arrayLike,[第二个参数],[第三个参数]);</code></p><ol><li>arrayLike:需要被转换的伪数组；</li><li>第二个参数：类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</li><li>第三个参数：接受一个 this 对象，用来改变 this 指向。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrayLike = &#123;</span><br><span class="line">      <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;wangwu&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;length&#x27;</span>: <span class="number">3</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> arry = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arry);</span><br><span class="line">    <span class="keyword">var</span> array1 = &#123;</span><br><span class="line">      <span class="number">0</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">      <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> arry2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(array1, <span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arry2);</span><br></pre></td></tr></table></figure><ul><li>实例方法<ol><li>find（）用于找出第一个符合条件的数组成员，如果没有找到返回undefined。浅层次查找。</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">      <span class="attr">goods</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;happy&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">let</span> target = ary.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> == <span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(target);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>findIndex()  用于找出第一个符合条件的数组成员的位置（索引号），如果没有找到返回-1。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">let</span> index = ary.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">15</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><ol start="3"><li>includes()   表示某个数组是否包含给定的值，返回布尔值。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">let</span> result = ary1.<span class="title function_">includes</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//true</span></span><br><span class="line">    result = ary1.<span class="title function_">includes</span>(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="（2）、String的扩展方法"><a href="#（2）、String的扩展方法" class="headerlink" title="（2）、String的扩展方法"></a>（2）、String的扩展方法</h4><ul><li>模板字符串</li></ul><p>ES6新增的创建字符串的方式，使用反引号定义。<br><code>let name =</code>zhangsan<code>;</code></p><ol><li>可以解析变量</li><li>可以换行输出</li><li>可以调用函数</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析变量</span></span><br><span class="line">   <span class="keyword">let</span> name = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">   <span class="keyword">let</span> sayHello = <span class="string">`my name is <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(sayHello);<span class="comment">//my name is zhangsan</span></span><br><span class="line">   <span class="comment">//可以换行</span></span><br><span class="line">   <span class="keyword">let</span> result = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">let</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">   &lt;div&gt;</span></span><br><span class="line"><span class="string">     &lt;span&gt;<span class="subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">     &lt;span&gt;<span class="subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">   &lt;/div&gt;</span></span><br><span class="line"><span class="string">   `</span>;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br><span class="line">   <span class="comment">//调用函数</span></span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&#x27;我是fn函数&#x27;</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">let</span> fun = <span class="string">`其实<span class="subst">$&#123;fn()&#125;</span>`</span>;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(fun);<span class="comment">//其实我是fn函数</span></span><br></pre></td></tr></table></figure><ul><li>实例方法<ol><li>startsWith()：表示参数字符串是否在原字符串的<code>头部</code>，返回布尔值；</li><li>endsWith()：表示参数字符串是否在原字符串的<code>尾部</code>，返回布尔值。</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello world!&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;Hello&#x27;</span>));<span class="comment">//true</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">endsWith</span>(<span class="string">&#x27;!&#x27;</span>));  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>repeat() :  表示将原字符串重复n次，返回一个新字符串。</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;xml&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>));<span class="comment">//xmlxmlxml</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">5</span>));<span class="comment">//zzzzz</span></span><br></pre></td></tr></table></figure><h4 id="（3）、Set数据结构"><a href="#（3）、Set数据结构" class="headerlink" title="（3）、Set数据结构"></a>（3）、Set数据结构</h4><p>ES6 提供了新的数据结构 Set。它<code>类似于数组</code>，但是成员的值都是<code>唯一的</code>，没有重复的值。 Set本身是一个构造函数，用来生成 Set 数据结构。<br><code>const s =new Set();</code></p><ul><li>Set结构</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s1);<span class="comment">//Object</span></span><br><span class="line">    <span class="comment">//过滤重复值</span></span><br><span class="line">    <span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s2);</span><br><span class="line">    <span class="comment">//数组去重</span></span><br><span class="line">    <span class="keyword">const</span> ary = [...s2];<span class="comment">//[&#x27;a&#x27;,&#x27;b&#x27;]</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ary);</span><br></pre></td></tr></table></figure><ul><li>Set结构转换为数组</li></ul><p>Array.from方法可以将 Set 结构转为数组。（同上扩展运算法也可实现）。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">   <span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(items);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(array);</span><br></pre></td></tr></table></figure><ul><li>实例方法<ol><li>add(value)：添加某个值，返回 Set 结构本身；</li><li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功；</li><li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员；</li><li>clear()：清除所有成员，没有返回值。</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">   s.<span class="title function_">add</span>(<span class="number">1</span>).<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">delete</span>(<span class="number">2</span>));<span class="comment">//true</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">   <span class="comment">//has 是否有，返回布尔值</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="number">1</span>));<span class="comment">//true</span></span><br><span class="line">   <span class="comment">// s.clear();</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br></pre></td></tr></table></figure><ul><li>遍历</li></ul><p>Set 结构的实例与数组一样，也拥有forEach方法，用于对每个成员执行某种操作，没有返回值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">    s.<span class="title function_">forEach</span>(<span class="function"><span class="params">value</span> =&gt;</span> total += value);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(total);<span class="comment">//6</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 三剑客 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
